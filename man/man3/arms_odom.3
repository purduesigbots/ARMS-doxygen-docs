.TH "arms::odom" 3 "Sun Oct 16 2022" "ARMS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
arms::odom
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBconfig_data_s\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBarms::odom::EncoderType\fP \fBEncoderType_e_t\fP"
.br
.ti -1c
.RI "typedef struct \fBarms::odom::config_data_s\fP \fBconfig_data_s_t\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBEncoderType\fP { \fBENCODER_ADI\fP, \fBENCODER_ROTATION\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBgetLeftEncoder\fP ()"
.br
.ti -1c
.RI "double \fBgetRightEncoder\fP ()"
.br
.ti -1c
.RI "double \fBgetMiddleEncoder\fP ()"
.br
.ti -1c
.RI "\fBPoint\fP \fBgetPosition\fP ()"
.br
.ti -1c
.RI "double \fBgetHeading\fP (bool radians=false)"
.br
.ti -1c
.RI "void \fBreset\fP (\fBPoint\fP point={0, 0})"
.br
.ti -1c
.RI "void \fBreset\fP (\fBPoint\fP point, double angle)"
.br
.ti -1c
.RI "double \fBgetAngleError\fP (\fBPoint\fP point)"
.br
.ti -1c
.RI "double \fBgetDistanceError\fP (\fBPoint\fP point)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "std::shared_ptr< pros::Imu > \fBimu\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This namespace deals with the odometry system\&. It is used to track the robot's position on the field\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBarms::odom::EncoderType\fP \fBarms::odom::EncoderType_e_t\fP"

.SS "typedef struct \fBarms::odom::config_data_s\fP \fBarms::odom::config_data_s_t\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBarms::odom::EncoderType\fP"
This enum is used to specify the type of encoder used\&. The options are: ENCODER_ADI or ENCODER_ROTATION
.PP
This is used for setup in \fBarms::config::ENCODER_TYPE\fP 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIENCODER_ADI \fP\fP
.TP
\fB\fIENCODER_ROTATION \fP\fP
.SH "Function Documentation"
.PP 
.SS "double arms::odom::getLeftEncoder ()"
Return the left encoder position 
.SS "double arms::odom::getRightEncoder ()"
Return the right encoder position 
.SS "double arms::odom::getMiddleEncoder ()"
Return the middle encoder position 
.SS "\fBPoint\fP arms::odom::getPosition ()"
Return a \fBPoint\fP representing the robot's position on the field 
.SS "double arms::odom::getHeading (bool radians = \fCfalse\fP)"

.SS "void arms::odom::reset (\fBPoint\fP point = \fC{0, 0}\fP)"

.PP
\fBParameters\fP
.RS 4
\fIpoint\fP The position to reset the robot to
.RE
.PP
\fBExample:\fP 
.PP
.nf
// reset the robot's position to be at x: 24 inches, y: 0 inches 
arms::odom::reset({24, 0});

.fi
.PP
.PP
Reset the odometry system to the provided position\&. 
.SS "void arms::odom::reset (\fBPoint\fP point, double angle)"

.PP
\fBParameters\fP
.RS 4
\fIpoint\fP The position to reset the robot to
.br
\fIangle\fP The angle to reset the robot to
.RE
.PP
\fBExample:\fP 
.PP
.nf
// reset the robot's position to be at x: 24 inches, y: 0 inches, and angle: 90 degrees
arms::odom::reset({24, 0}, 90);

.fi
.PP
.PP
Reset the odometry system to the provided position and angle\&. 
.SS "double arms::odom::getAngleError (\fBPoint\fP point)"

.PP
\fBParameters\fP
.RS 4
\fIpoint\fP The point we want to get the angle error of
.RE
.PP
\fBExample:\fP 
.PP
.nf
// get the angle error of the point (24, 0)
double error = arms::odom::getAngleError({24, 0});

.fi
.PP
.PP
Return the angle error between the robot's current heading and the angle to the provided point\&. 
.SS "double arms::odom::getDistanceError (\fBPoint\fP point)"

.PP
\fBParameters\fP
.RS 4
\fIpoint\fP The point we want to get the distance error of
.RE
.PP
\fBExample:\fP 
.PP
.nf
// get the distance error of the point (24, 0)
double error = arms::odom::getDistanceError({24, 0});

.fi
.PP
.PP
Return the distance error between the robot's current position and the provided point\&. 
.SH "Variable Documentation"
.PP 
.SS "std::shared_ptr< pros::Imu > arms::odom::imu\fC [extern]\fP"
The IMU sensor\&. This is used by odom to get the robot's heading\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for ARMS from the source code\&.
