.TH "arms::chassis" 3 "Sun Oct 16 2022" "ARMS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
arms::chassis
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsetBrakeMode\fP (pros::motor_brake_mode_e_t b)"
.br
.ti -1c
.RI "bool \fBsettled\fP ()"
.br
.ti -1c
.RI "void \fBwaitUntilFinished\fP (double exit_error)"
.br
.ti -1c
.RI "void \fBmove\fP (std::vector< double > target, double max, double exit_error, double lp, double ap, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBmove\fP (double target, double max, double exit_error, double lp, double ap, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.RI "move the chassis a target distance forward "
.ti -1c
.RI "void \fBturn\fP (double target, double max, double exit_error, double ap, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.RI "turn the chassis a target angle "
.ti -1c
.RI "void \fBturn\fP (\fBPoint\fP target, double max, double exit_error, double ap, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.RI "turn the chassis to face a target point "
.ti -1c
.RI "void \fBtank\fP (double left, double right, bool velocity=false)"
.br
.RI "move the chassis using tank drive "
.ti -1c
.RI "void \fBarcade\fP (double vertical, double horizontal, bool velocity=false)"
.br
.RI "move the chassis using arcade drive "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "double \fBmaxSpeed\fP"
.br
.ti -1c
.RI "std::shared_ptr< pros::Motor_Group > \fBleftMotors\fP"
.br
.ti -1c
.RI "std::shared_ptr< pros::Motor_Group > \fBrightMotors\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This namespace contains all of the functions and variables needed to control the chassis\&. 
.SH "Function Documentation"
.PP 
.SS "void arms::chassis::setBrakeMode (pros::motor_brake_mode_e_t b)"
Sets the chassis's brake mode
.PP
\fBParameters\fP
.RS 4
\fIbrakeMode\fP The chassis brake mode
.RE
.PP
\fBExample 1:\fP 
.PP
.nf
//set the chassis's brake mode to coast
chassis::setBrakeMode(pros::E_MOTOR_BRAKE_COAST);

.fi
.PP
.PP
Sets the chassis's brake mode to a valid \fCPROS Brake Mode\fP Options are coast, hold, and brake\&. 
.SS "bool arms::chassis::settled ()"

.PP
\fBReturns\fP
.RS 4
True if the chassis is settled, false otherwise
.RE
.PP
\fBExample 1:\fP 
.PP
.nf
//wait until the chassis is settled
while(!chassis::settled()) {
   pros::delay(20);
}

.fi
.PP
.PP
Checks if the chassis is settled\&. 
.SS "void arms::chassis::waitUntilFinished (double exit_error)"

.PP
\fBParameters\fP
.RS 4
\fIexit_error\fP The minimum error from the target point to exit the wait
.RE
.PP
\fBExample 1:\fP 
.PP
.nf
//wait for the chassis to finish a movement with a 1 inch error
waitUntilFinished(1);

.fi
.PP
.PP
Waits for the chassis to reach a target point within a certain \fIexit_error\fP\&. This function should not be required, as \fBchassis::move\fP is already a blocking function by default\&. However, this may need to be used if the \fBchassis::move\fP function is called with the \fBMoveFlags::async\fP flag\&. 
.SS "void arms::chassis::move (std::vector< double > target, double max, double exit_error, double lp, double ap, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"
Perform a 2D chassis movement based on the parameters provided\&. 
.PP
\fBParameters\fP
.RS 4
\fItarget\fP The target point to move to\&. 
.br
\fImax\fP The maximum speed to move at\&. 
.br
\fIexit_error\fP The minimum distance from the target point to exit the movement\&. 
.br
\fIlp\fP The linear kP for the movement\&. 
.br
\fIap\fP The angular kP for the movement\&. 
.br
\fIflags\fP The flags to use when moving the chassis\&.
.RE
.PP
\fBExample 1:\fP 
.PP
.nf
//move the chassis to coordinate {50, 40} at 100% max speed
chassis::move({50, 40}, 100);

.fi
.PP
.PP
\fBExample 2:\fP 
.PP
.nf
//move the chassis to coordinate {30, 72} at 100% max speed backwards
chassis::move({30, 72}, 100, arms::REVERSE);

.fi
.PP
.PP
\fBExample 3:\fP 
.PP
.nf
//move the chassis to the pose {48, 48, 90deg} at 75% max speed with a 2 inch exit error
//Movements to a pose will use our `Boomerang controller`, which uses trigonometry to move to the target point and angle
chassis::move({48, 48, 90}, 75, 2);

.fi
.PP
.PP
Moves the chassis to a target point\&. Almost all parameters are optional\&. Technically, only the \fItarget\fP parameter is required\&. However, it is recommended to provide the max parameter aswell so that you have control over the maximum speed of the chassis\&.
.PP
The \fItarget\fP parameter is a vector of doubles that represents the target point (x, y), or pose (x, y, theta)\&. For a target point, our standard point-point odometry motion is used\&. For a target pose, our Boomerang controller is used\&. More information on these can be seen at \fBMotionControl\&.
.br
\fP The \fImax\fP parameter can be used to set the maximum speed of the movement\&. It will default to 100% if not provided\&.
.br
The \fIexit_error\fP parameter can be used to set the minimum error from the target point to exit the movement\&. It will default to what is provided in \fBconfig::h::MIN_ERROR\fP if not provided\&.
.br
The \fIlp\fP parameter can be used to set the linear kP for the movement\&. It will default to what is provided in \fBconfig\&.h\fP if not provided\&.
.br
The \fIap\fP parameter can be used to set the angular kP for the movement\&. It will default to what is provided in \fBconfig\&.h\fP if not provided\&.
.br
The \fIflags\fP parameter can be used to set the flags for the movement\&. A list of them and their descriptions can be found in the \fBMoveFlags\fP enum\&.
.br

.SS "void arms::chassis::move (double target, double max, double exit_error, double lp, double ap, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.PP
move the chassis a target distance forward 
.PP
\fBParameters\fP
.RS 4
\fItarget\fP The target distance to move to\&. 
.br
\fIflags\fP The flags to use when moving the chassis\&. 
.br
\fImax\fP The maximum speed to move at\&. 
.br
\fIexit_error\fP The minimum distance from the target point to exit the movement\&. 
.br
\fIlp\fP The linear kP for the movement\&. 
.br
\fIap\fP The angular kP for the movement\&. 
.br
\fIflags\fP The flags to use when moving the chassis\&.
.RE
.PP
Almost all parameters are optional\&. Technically, only the \fItarget\fP parameter is required\&. However, it is recommended to provide the max parameter aswell so that you have control over the maximum speed of the chassis\&.
.PP
\fBExample 1:\fP 
.PP
.nf
//move the chassis forwards 24 inches at 100% max speed
chassis::move(24, 100);

.fi
.PP
.PP
\fBExample 2:\fP 
.PP
.nf
//move the chassis backwards 72 inches at 100% max speed 
chassis::move(-72, 100, arms::REVERSE);

.fi
.PP
.PP
\fBExample 3:\fP 
.PP
.nf
//move the chassis forwards 48 inches at 75% max speed with a 2 inch exit error with PID disabled
chassis::move(48, 75, 2, arms::THRU);

.fi
.PP
.PP
Moves the chassis a target distance\&. Almost all parameters are optional\&. Technically, only the \fItarget\fP parameter is required\&. However, it is recommended to provide the max parameter aswell so that you have control over the maximum speed of the chassis\&.
.PP
The \fItarget\fP parameter is used to specify how far the chassis should move\&. The \fImax\fP parameter can be used to set the maximum speed of the movement\&. It will default to 100% if not provided\&.
.br
The \fIexit_error\fP parameter can be used to set the minimum error from the target point to exit the movement\&. It will default to what is provided in \fBconfig::h::MIN_ERROR\fP if not provided\&.
.br
The \fIlp\fP parameter can be used to set the linear kP for the movement\&. It will default to what is provided in \fBconfig\&.h\fP if not provided\&.
.br
The \fIap\fP parameter can be used to set the angular kP for the movement\&. It will default to what is provided in \fBconfig\&.h\fP if not provided\&.
.br
The \fIflags\fP parameter can be used to set the flags for the movement\&. A list of them and their descriptions can be found in the \fBMoveFlags\fP enum\&. The \fBarms::RELATIVE\fP flag is always enabled for this, as you should only use this to move a relative distance straight with the bot\&.
.br

.SS "void arms::chassis::turn (double target, double max, double exit_error, double ap, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.PP
turn the chassis a target angle Perform a turn movement
.PP
\fBParameters\fP
.RS 4
\fItarget\fP The target angle to turn to\&. 
.br
\fIflags\fP The flags to use when moving the chassis\&. 
.br
\fImax\fP The maximum speed to move at\&. 
.br
\fIexit_error\fP The minimum distance from the target point to exit the movement\&. 
.br
\fIap\fP The angular kP for the movement\&. 
.br
\fIflags\fP The flags to use when moving the chassis\&.
.RE
.PP
Almost all parameters are optional\&. Technically, only the \fItarget\fP parameter is required\&. However, it is recommended to provide the max parameter aswell so that you have control over the maximum speed of the chassis\&.
.PP
\fBExample 1:\fP 
.PP
.nf
//turn the chassis to face 90 degrees at 100% max speed
chassis::turn(90, 100);

.fi
.PP
.PP
\fBExample 2:\fP 
.PP
.nf
//turn the chassis 180 degrees clockwise at 100% max speed
chassis::turn(-180, 100, arms::RELATIVE);

.fi
.PP
.PP
\fBExample 3:\fP 
.PP
.nf
//turn the chassis to face 90 degrees at 75% max speed with a 2 degree exit error with PID disabled
chassis::turn(90, 75, 2, arms::THRU);

.fi
.PP
.PP
Turns the chassis a target angle\&. Almost all parameters are optional\&. Technically, only the \fItarget\fP parameter is required\&. However, it is recommended to provide the max parameter aswell so that you have control over the maximum speed of the chassis\&.
.PP
The \fItarget\fP parameter is a double that represents the target angle (theta)\&. We use our PID controller to turn to the target angle\&. More information on this can be seen at \fBMotionControl\&.
.br
\fP The \fImax\fP parameter can be used to set the maximum speed of the movement\&. It will default to 100% if not provided\&.
.br
The \fIexit_error\fP parameter can be used to set the minimum error from the target point to exit the movement\&. It will default to what is provided in \fBconfig::h::MIN_ERROR\fP if not provided\&.
.br
The \fIap\fP parameter can be used to set the angular kP for the movement\&. It will default to what is provided in \fBconfig\&.h\fP if not provided\&.
.br
The \fIflags\fP parameter can be used to set the flags for the movement\&. A list of them and their descriptions can be found in the \fBMoveFlags\fP enum\&. 
.SS "void arms::chassis::turn (\fBPoint\fP target, double max, double exit_error, double ap, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.PP
turn the chassis to face a target point 
.PP
\fBParameters\fP
.RS 4
\fItarget\fP The target point to turn to\&. 
.br
\fIflags\fP The flags to use when moving the chassis\&. 
.br
\fImax\fP The maximum speed to move at\&. 
.br
\fIexit_error\fP The minimum distance from the target point to exit the movement\&. 
.br
\fIap\fP The angular kP for the movement\&. 
.br
\fIflags\fP The flags to use when moving the chassis\&.
.RE
.PP
\fBExample 1:\fP 
.PP
.nf
//turn the chassis to face the point (24, 24) at 100% speed
chassis::turn({24, 24}, 100);

.fi
.PP
.PP
\fBExample 2:\fP 
.PP
.nf
//turn the chassis to face the point {72, -48} at 75% speed
chassis::turn({72, -48}, 75);

.fi
.PP
.PP
\fBExample 3:\fP 
.PP
.nf
//turn the chassis to face the point (24, 24) at 100% speed with a 2 degree exit error with PID disabled
chassis::turn({24, 24}, 100, 2, arms::THRU);

.fi
.PP
.PP
Turns the chassis a target angle\&. Almost all parameters are optional\&. Technically, only the \fItarget\fP parameter is required\&. However, it is recommended to provide the max parameter aswell so that you have control over the maximum speed of the chassis\&.
.PP
The \fItarget\fP parameter is a \fBPoint\fP that represents the point we want to turn to face\&. We use our PID controller to turn to the target angle\&. More information on this can be seen at \fBMotionControl\&.
.br
\fP The \fImax\fP parameter can be used to set the maximum speed of the movement\&. It will default to 100% if not provided\&.
.br
The \fIexit_error\fP parameter can be used to set the minimum error from the target point to exit the movement\&. It will default to what is provided in \fBconfig::h::MIN_ERROR\fP if not provided\&.
.br
The \fIap\fP parameter can be used to set the angular kP for the movement\&. It will default to what is provided in \fBconfig\&.h\fP if not provided\&.
.br
The \fIflags\fP parameter can be used to set the flags for the movement\&. A list of them and their descriptions can be found in the \fBMoveFlags\fP enum\&. 
.SS "void arms::chassis::tank (double left, double right, bool velocity = \fCfalse\fP)"

.PP
move the chassis using tank drive 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP The left side velocity or percentage (0%-100%)\&. 
.br
\fIright\fP The right side velocity or percentage (0%-100%)\&. 
.br
\fIvelocity\fP Whether the values are velocities or percentages\&. Defaults to false for percentage mode\&.
.RE
.PP
\fBExample 1:\fP 
.PP
.nf
//move the chassis forward at 100% speed
chassis::tank(100, 100);

.fi
.PP
.PP
\fBExample 2:\fP 
.PP
.nf
//move the chassis forward at 100 rpm
chassis::tank(100, 100, true);

.fi
.PP
.PP
\fBExample 3:\fP 
.PP
.nf
//move the left side of the chassis forward at 100% speed, and the right side backwards at 50% speed
chassis::tank(100, -50);

.fi
.PP
 
.SS "void arms::chassis::arcade (double forward, double turn, bool velocity = \fCfalse\fP)"

.PP
move the chassis using arcade drive 
.PP
\fBParameters\fP
.RS 4
\fIforward\fP The forward velocity or percentage (0%-100%)\&. 
.br
\fIturn\fP The turn velocity or percentage (0%-100%)\&. 
.br
\fIvelocity\fP Whether the values are velocities or percentages\&. Defaults to false for percentage mode\&.
.RE
.PP
\fBExample 1:\fP 
.PP
.nf
//move the chassis forward at 100% speed
chassis::arcade(100, 0);

.fi
.PP
.PP
\fBExample 2:\fP 
.PP
.nf
//move the chassis forward at 100 rpm
chassis::arcade(100, 0, true);

.fi
.PP
.PP
\fBExample 3:\fP 
.PP
.nf
//move the chassis forward at 100% speed, and turn left at 50% speed
chassis::arcade(100, -50);

.fi
.PP
 
.SH "Variable Documentation"
.PP 
.SS "double arms::chassis::maxSpeed\fC [extern]\fP"
This variable is used to set the maximum speed of the chassis\&. 
.SS "std::shared_ptr< pros::Motor_Group > arms::chassis::leftMotors\fC [extern]\fP"
This variable is a pointer to a Motor_Group object that contains all of the left motors\&. 
.SS "std::shared_ptr< pros::Motor_Group > arms::chassis::rightMotors\fC [extern]\fP"
This variable is a pointer to a Motor_Group object that contains all of the right motors\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for ARMS from the source code\&.
