.TH "arms::chassis" 3 "Thu Jul 28 2022" "ARMS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
arms::chassis \- The chassis subsystem\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBmotorMove\fP (std::shared_ptr< okapi::MotorGroup > motor, double speed, bool vel)"
.br
.ti -1c
.RI "void \fBsetBrakeMode\fP (okapi::AbstractMotor::brakeMode b)"
.br
.ti -1c
.RI "void \fBresetAngle\fP (double angle=0)"
.br
.ti -1c
.RI "double \fBlimitSpeed\fP (double speed, double max)"
.br
.ti -1c
.RI "double \fBslew\fP (double speed, double step, double prev)"
.br
.ti -1c
.RI "bool \fBsettled\fP ()"
.br
.ti -1c
.RI "void \fBwaitUntilFinished\fP (double exit_error)"
.br
.ti -1c
.RI "void \fBmove\fP (\fBPoint\fP target, double max, double exit_error, double lp, double ap, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBmove\fP (\fBPoint\fP target, double max, double exit_error, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBmove\fP (\fBPoint\fP target, double max, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBmove\fP (\fBPoint\fP target, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBturn\fP (double target, double max, double exit_error, double ap, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBturn\fP (double target, double max, double exit_error, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBturn\fP (double target, double max, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBturn\fP (double target, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBturn\fP (\fBPoint\fP target, double max, double exit_error, double ap, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBturn\fP (\fBPoint\fP target, double max, double exit_error, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBturn\fP (\fBPoint\fP target, double max, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBturn\fP (\fBPoint\fP target, \fBMoveFlags\fP=\fBNONE\fP)"
.br
.ti -1c
.RI "void \fBtank\fP (double left, double right, bool velocity=false)"
.br
.ti -1c
.RI "void \fBarcade\fP (double vertical, double horizontal, bool velocity=false)"
.br
.ti -1c
.RI "void \fBinit\fP (std::initializer_list< okapi::Motor > \fBleftMotors\fP, std::initializer_list< okapi::Motor > \fBrightMotors\fP, int gearset, double distance_constant, double degree_constant, double \fBslew_step\fP, double linear_exit_error, double angular_exit_error, double settle_thresh_linear, double settle_thresh_angular, int settle_time)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "double \fBmaxSpeed\fP"
.br
.ti -1c
.RI "double \fBleftPrev\fP"
.br
.ti -1c
.RI "double \fBrightPrev\fP"
.br
.ti -1c
.RI "double \fBslew_step\fP"
.br
.ti -1c
.RI "std::shared_ptr< okapi::MotorGroup > \fBleftMotors\fP"
.br
.ti -1c
.RI "std::shared_ptr< okapi::MotorGroup > \fBrightMotors\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The chassis subsystem\&. 

This namespace stores all functions and motors used to control the chassis\&. 
.SH "Function Documentation"
.PP 
.SS "void arms::chassis::motorMove (std::shared_ptr< okapi::MotorGroup > motor, double speed, bool vel)"
Set the speed of target motor 
.SS "void arms::chassis::setBrakeMode (okapi::AbstractMotor::brakeMode b)"
Set the brake mode for all chassis motors 
.SS "void arms::chassis::resetAngle (double angle = \fC0\fP)"
Reset imu if it is being used 
.SS "double arms::chassis::limitSpeed (double speed, double max)"
Reduce an input speed if it exceeds the max value 
.SS "double arms::chassis::slew (double speed, double step, double prev)"
Get a gradually accelerating speed towards the target input 
.SS "bool arms::chassis::settled ()"
Return true of the chassis is not moving 
.SS "void arms::chassis::waitUntilFinished (double exit_error)"
Wait for the chassis to complete the current movement 
.SS "void arms::chassis::move (\fBPoint\fP target, double max, double exit_error, double lp, double ap, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"
Perform a chassis movement 
.SS "void arms::chassis::move (\fBPoint\fP target, double max, double exit_error, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.SS "void arms::chassis::move (\fBPoint\fP target, double max, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.SS "void arms::chassis::move (\fBPoint\fP target, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.SS "void arms::chassis::turn (double target, double max, double exit_error, double ap, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"
Perform a turn movement 
.SS "void arms::chassis::turn (double target, double max, double exit_error, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.SS "void arms::chassis::turn (double target, double max, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.SS "void arms::chassis::turn (double target, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.SS "void arms::chassis::turn (\fBPoint\fP target, double max, double exit_error, double ap, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"
Turn to face a point 
.SS "void arms::chassis::turn (\fBPoint\fP target, double max, double exit_error, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.SS "void arms::chassis::turn (\fBPoint\fP target, double max, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.SS "void arms::chassis::turn (\fBPoint\fP target, \fBMoveFlags\fP = \fC\fBNONE\fP\fP)"

.SS "void arms::chassis::tank (double left, double right, bool velocity = \fCfalse\fP)"
Assign a power to the left and right motors 
.SS "void arms::chassis::arcade (double vertical, double horizontal, bool velocity = \fCfalse\fP)"
Assign a vertical and horizontal power to the motors 
.SS "void arms::chassis::init (std::initializer_list< okapi::Motor > leftMotors, std::initializer_list< okapi::Motor > rightMotors, int gearset, double distance_constant, double degree_constant, double slew_step, double linear_exit_error, double angular_exit_error, double settle_thresh_linear, double settle_thresh_angular, int settle_time)"
initialize the chassis 
.SH "Variable Documentation"
.PP 
.SS "double arms::chassis::maxSpeed\fC [extern]\fP"

.SS "double arms::chassis::leftPrev\fC [extern]\fP"

.SS "double arms::chassis::rightPrev\fC [extern]\fP"

.SS "double arms::chassis::slew_step\fC [extern]\fP"

.SS "std::shared_ptr<okapi::MotorGroup> arms::chassis::leftMotors\fC [extern]\fP"

.SS "std::shared_ptr<okapi::MotorGroup> arms::chassis::rightMotors\fC [extern]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for ARMS from the source code\&.
